//游戏状态管理的基础类
//需要继承使用

cc.IState = cc.Class.extend({

    //------------------------------------------------------------------------------------------------------------------
    ctor: function()
    {

    },

    //------------------------------------------------------------------------------------------------------------------
    description: function()
    {
        return "IState";
    },

    //------------------------------------------------------------------------------------------------------------------
    //进入这个State
    enter: function(/*wrapper, fromState*/)
    {
        //子类实现
        return this;
    },

    //------------------------------------------------------------------------------------------------------------------
    //离开这个State
    leave: function(/*wrapper*/)
    {
        //子类实现
        return this;
    },

    //------------------------------------------------------------------------------------------------------------------
    //循环更新
    update: function(/*wrapper, time*/)
    {
        //子类实现
        return this;
    },

    //------------------------------------------------------------------------------------------------------------------
    //切换到另一个状态
    changeTo: function(wrapper, toState)
    {
        if (wrapper)
        {
            //父类基础实现 子类一般不实现这个
            wrapper.changeTo(toState);
        }

        return this;
    }
});

//======================================================================================================================
cc.IStateWrapper = cc.Class.extend({

    //------------------------------------------------------------------------------------------------------------------
    ctor: function()
    {
        //当前State对象
        this.m_CurState = null;
    },

    //------------------------------------------------------------------------------------------------------------------
    //更新
    update: function(time)
    {
        if (this.m_CurState)
        {
            this.m_CurState.update(this, time);
        }

        return this;
    },

    //------------------------------------------------------------------------------------------------------------------
    //切换State
    changeTo: function(toState)
    {
        var old = this.m_CurState;
        this.m_CurState = toState;

        if (this.m_CurState != old)
        {
            if (old)
            {
                //旧的离开
                old.leave(this);
            }

            //
            if (this.m_CurState)
            {
                //新的加入
                this.m_CurState.enter(this, old);
            }
        }

        return this;
    },

    //------------------------------------------------------------------------------------------------------------------
    getCurState: function()
    {
        //处在暂停模式
        return this.m_CurState;
    }
});

